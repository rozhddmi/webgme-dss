/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Thu Nov 09 2017 10:13:08 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q',
    'common/storage/constants', // These will be needed to check that the commit did update the branch..
    'webgme-dss/parseSimulationData'
], function (PluginConfig,
             pluginMetadata,
             PluginBase,
             Q,
             STORAGE_CONSTANTS,
             simDataHelpers) {
    'use strict';

    let fs = require('fs'),
        path = require('path'),
        cp = require('child_process'),
        os = require('os'),
        generateInfoFile = simDataHelpers.generateInfoFile;

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of SimulateModelica.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin SimulateModelica.
     * @constructor
     */
    function SystemSimulator() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    SystemSimulator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    SystemSimulator.prototype = Object.create(PluginBase.prototype);
    SystemSimulator.prototype.constructor = SystemSimulator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    SystemSimulator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        let self = this,
            logger = this.logger,
            blobClient = this.blobClient,
            config = this.getCurrentConfig(),
            modelNode = self.activeNode,
            simPackageArtie = this.blobClient.createArtifact('SimPackage');

        let modelName = self.core.getAttribute(modelNode, 'name');
        let resultNode = self.core.getParent(modelNode);
        let dir;

        function generateDirectory(modelName) {
            let MAX_DIR_TRIES = 100,
                result;

            //Ensure top directory exists
            try {
                fs.mkdirSync('outputs');
            } catch (e) {
                if (e.code !== 'EEXIST') {
                    // We do expect the directory to exists
                    throw e;
                }
            }

            let dirname = modelName + '_' + Date.now();

            for (let i = 0; i < MAX_DIR_TRIES; i += 1) {
                result = path.join('outputs', dirname + '__' + i);
                try {
                    fs.mkdirSync(result);
                    break; // The directory was created!
                } catch (e) {
                    if (e.code !== 'EEXIST') {
                        throw e;
                    } else if (i === MAX_DIR_TRIES - 1) {
                        throw new Error('Failed to generate unique output directory after ' + MAX_DIR_TRIES + 'attempts!');
                    }
                }
            }

            return result;
        }

        function generateFiles(dir, moFileContent) {
            let mosScript = [
                'loadModel(Modelica); getErrorString();',
                'loadFile("' + modelName + '.mo"); getErrorString();',
                'simulate(' + modelName + ', startTime=0.0, stopTime=' + config.stopTime +
                ', outputFormat="csv"); getErrorString();'
            ].join('\n');

            if (config.runSimulation) {
                dir = generateDirectory(modelName);
                fs.writeFileSync(path.join(dir, modelName + '.mo'), moFileContent);
                fs.writeFileSync(path.join(dir, 'simulate.mos'), mosScript);
            }

            return Q.all([
                blobClient.putFile('README.text', 'On windows run:\n\r %OPENMODELICAHOME%\\bin\\omc.exe simulate.mos' +
                    '\n\rOn linux/macOs run:\n\r omc simulate.mos\n\r\n\rIn both cases from the extracted directory.'),
                blobClient.putFile('simulate.mos', mosScript),
            ])
                .then((hashes) => {
                    return Q.all([
                        simPackageArtie.addMetadataHash('README.text', hashes[0]),
                        simPackageArtie.addMetadataHash('simulate.mos', hashes[1])
                    ]);
                })
                .then(() => {
                    return simPackageArtie.save();
                })
        }

        function callSimulationScript(dir, modelName) {
            let command;
            if (os.platform().indexOf('win') === 0) {
                command = '%OPENMODELICAHOME%\\bin\\omc.exe simulate.mos';
            } else {
                command = 'omc simulate.mos';
            }

            // ninvoke turns exec into a promise call...
            return Q.ninvoke(cp, 'exec', command, {cwd: dir})
                .then(function (res) {
                    logger.info(res);

                    return {
                        dir: dir,
                        resultFileName: generateInfoFile(path.join(dir, modelName)),
                        stdout: res[0],
                        stderr: res[1]
                    };
                });
        }

        function simulateAndSaveResults() {
            return callSimulationScript(dir, modelName)
                .then(function (res) {
                    let resJson = fs.readFileSync(res.resultFileName, 'utf-8');
                    //return self.blobClient.putFile(res.resultFileName, fs.readFileSync(res.resultFileName));
                    return {
                        resInfo: resJson,
                        stdout: res.stdout
                    };
                })
                .then(function (res) {
                    self.core.setAttribute(resultNode, 'simRes', res.resInfo);
                    self.core.setAttribute(resultNode, 'stdout', res.stdout);

                    logger.info('Will save results to model..');

                    return self.save('Attached simulation results at ' + self.core.getPath(resultNode));
                })
                .then(function (commitResult) {
                    if (commitResult.status !== STORAGE_CONSTANTS.SYNCED) {
                        self.createMessage(modelNode, 'Simulation succeeded but commit did not update branch.' +
                            'status: ' + commitResult.status);
                        throw new Error('Did not update branch.');
                    }
                });
        }

        // Identified by the plugin id
        self.invokePlugin('ModelicaCodeGenerator')
            .then(function (result) {
                if (result.getSuccess() !== true) {
                    throw new Error('ModelicaCodeGenerator did not return with success!');
                }

                if (typeof result.pluginInstance.moFile !== 'string') {
                    throw new Error('No string from ModelicaCodeGenerator at result.pluginInstance.moFile!');
                }

                simPackageArtie.addMetadataHash(modelName + '.mo', result.artifacts[0]);

                let moFile = result.pluginInstance.moFile;
                // Write out the files..
                return generateFiles(dir, moFile);
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                if (config.runSimulation) {
                    return simulateAndSaveResults();
                }
            })
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                logger.error(err.stack);
                callback(err, self.result);
            });

    };

    return SystemSimulator;
});
